# Title: Scraping Codes for Tesco
# Date Commence:1/9/2020
# By: Hafizuddin
# Maintainer: -
# Objective: Getting the details of the products in the website
# Version: 1.0
# Date Modified:
# Input Data: https:https://eshop.tesco.com.my/groceries/
# Output: tesco_raw_(date).RDS. dataframe of mydin products detail

# R version 4.0.3 (2020-10-10)
# Platform: x86_64-pc-linux-gnu (64-bit)
# Running under: CentOS Linux 7 (Core)
# 
# Matrix products: default
# BLAS:   /d/sw/R/4.0.3/lib64/R/lib/libRblas.so
# LAPACK: /d/sw/R/4.0.3/lib64/R/lib/libRlapack.so
# 
# locale:
#   [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
# [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
# [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
# [10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       
# 
# attached base packages:
#   [1] stats     graphics  grDevices utils     datasets  methods   base     
# 
# other attached packages:
#   [1] dplyr_1.0.6     stringr_1.4.0   netstat_0.1.1   RSelenium_1.7.7 rvest_0.3.6     xml2_1.3.2     
# 
# loaded via a namespace (and not attached):
#   [1] Rcpp_1.0.5       pillar_1.6.1     compiler_4.0.3   bitops_1.0-6     tools_4.0.3     
# [6] jsonlite_1.7.2   lifecycle_1.0.0  tibble_3.1.2     pkgconfig_2.0.3  rlang_0.4.10    
# [11] DBI_1.1.0        curl_4.3         yaml_2.2.1       binman_0.1.2     httr_1.4.2      
# [16] generics_0.1.0   vctrs_0.3.8      askpass_1.1      caTools_1.18.0   hms_0.5.3       
# [21] rappdirs_0.3.1   tidyselect_1.1.0 glue_1.4.2       R6_2.5.0         processx_3.4.5  
# [26] fansi_0.4.1      RMySQL_0.10.21   XML_3.99-0.6     blob_1.2.1       purrr_0.3.4     
# [31] readr_1.4.0      semver_0.2.0     selectr_0.4-2    magrittr_2.0.1   ps_1.5.0        
# [36] ellipsis_0.3.2   assertthat_0.2.1 utf8_1.1.4       stringi_1.5.3    openssl_1.4.3   
# [41] wdman_0.2.5      crayon_1.4.1   

# 1.0 Library
library(rvest)
library(RSelenium)
library(netstat)
library(stringr)

tesco_scraper <- function(){
  # Rselenium profile
  options(java.parameters = "-Xmx4g")
  fprof <- makeFirefoxProfile(list(browser.download.dir = "\\d\\dataSandbox\\scraping\\jira\\data_dashboard",
                                   browser.download.folderList = 2L,
                                   browser.download.manager.showWhenStarting = FALSE,
                                   browser.helperApps.neverAsk.saveToDisk = "text/csv",
                                   browser.tabs.remote.autostart = FALSE,
                                   browser.tabs.remote.autostart.2 = FALSE,
                                   browser.tabs.remote.desktopbehavior = FALSE
  )
  )
  exCap <- list(firefox_profile = fprof$firefox_profile, 
                "moz:firefoxOptions" = list(args = list('--headless')))
  cat('Scraping category links\n')
  # 2.0 Get category links
  main_pg = 'https://eshop.tesco.com.my/groceries/'
  category_links = vector()
  # Open browser
  drv_port = as.integer(runif(1, min=10000, max=20000))
  driver = rsDriver(port = drv_port, browser = "firefox", geckover = "latest", extraCapabilities = exCap)
  while (!exists('driver')) {
    drv_port = as.integer(drv_port-1)
    driver = rsDriver(port = drv_port, browser = "firefox", geckover = "latest", extraCapabilities = exCap)
  }
  remDr = driver[["client"]]
  remDr$navigate(main_pg)
  # get 1st category links
  category_1 = remDr$findElements('css','.menu__link.menu__link--superdepartment')
  for(i in 1:length(category_1)){
    category_1[[i]]$clickElement()
    # get 2nd category links
    all_category_2 = remDr$findElements('css','.menu__link.menu__link--department.menu__link--all')
    category_2 = remDr$findElements('css','.menu__link.menu__link--department')
    category_2 = lapply(category_2,function(x) if(x[[".->elementId"]]!=all_category_2[[1]][[".->elementId"]]){x})
    category_2 = Filter(Negate(is.null),category_2)
    for(j in 1:length(category_2)){
      category_2[[j]]$clickElement()
      # get 3rd category links
      html = read_html(remDr$getPageSource()[[1]])
      all_category_3 =  html %>% html_nodes('.menu__link.menu__link--aisle.menu__link--all') %>% html_attr('href')
      category_3 = html %>% html_nodes('.menu__link.menu__link--aisle') %>% html_attr('href')
      category_3 = category_3[category_3!=all_category_3]
      category_links = append(category_links,category_3)
      remDr$deleteAllCookies()
    }
  }
  # close
  remDr$close()
  driver$server$stop()
  # edit category links
  category_links = paste0('https://eshop.tesco.com.my',category_links)
  category_links = category_links[!grepl('myhttps://',category_links)]
  
  # 3.0 Get product links
  products_df = data.frame()
  # Open browser
  driver = rsDriver(port = drv_port, browser = "firefox", geckover = "latest", extraCapabilities = exCap)
  remDr = driver[["client"]]
  # set progress bar
  cat('Scraping product details\n')
  pb = txtProgressBar(min = 1,max = length(category_links),style = 3)
  for(i in 1:length(category_links)){
    # progress bar
    setTxtProgressBar(pb,i)
    # navigate page
    remDr$navigate(category_links[i])
    Sys.sleep(2)
    html = read_html(remDr$getPageSource()[[1]])
    # delete cookies
    while(xml_child(xml_child(html, 2), 1) %>% html_text()=='Access Denied'){
      # cat('Delete kukis...',i,'\n')
      remDr$deleteAllCookies()
      remDr$navigate(category_links[i])
      Sys.sleep(2)
      html = read_html(remDr$getPageSource()[[1]])
    }
    # scrape
    name = html %>% html_nodes('.product-details--content h3') %>% html_text()
    price = html %>% html_nodes('.price-per-quantity-weight') %>% html_text()
    offer = vector()
    offer_date = vector()
    for(j in 1:length(name)){
      xpth1 = paste0('//*[@id="tile-7001829106"]/div[',j,']/div[2]/div/ul/li/a/div/span[1]')
      ofr1 = html %>% html_nodes(xpath = xpth1) %>% html_text()
      xpth2 = paste0('//*[@id="tile-7001829106"]/div[',j,']/div[2]/div/ul/li/a/div/span[2]')
      ofr2 = html %>% html_nodes(xpath = xpth2) %>% html_text()
      
      offer[j] = ifelse(length(ofr1)==0,NA,ofr1)
      offer_date[j] = ifelse(length(ofr2)==0,NA,ofr2)
    }
    if(length(name)!=length(price)){price = html %>% html_nodes('.price-control-wrapper') %>% html_text()}
    url = category_links[i]
    # skip if empty
    if(length(name)==0){next}
    # save in dataframe
    df = data.frame(item=name,offer=offer,offer_dates=offer_date,price=price,url=url)
    products_df = rbind(products_df,df)
    # go to next page
    next_pg = html %>% html_nodes('.pagination--button.prev-next') %>% html_attr('href')
    next_pg = next_pg[length(next_pg)]
    while(!is.na(next_pg)){
      next_pg = paste0('https://eshop.tesco.com.my',next_pg)
      if(url==next_pg){break}
      remDr$navigate(next_pg)
      Sys.sleep(2)
      html = read_html(remDr$getPageSource()[[1]])
      # delete cookies
      while(xml_child(xml_child(html, 2), 1) %>% html_text()=='Access Denied'){
        # cat('Delete kukis...',i,'\n')
        remDr$deleteAllCookies()
        remDr$navigate(next_pg)
        Sys.sleep(2)
        html = read_html(remDr$getPageSource()[[1]])
      }
      # cat('another page\n')
      # scrape
      name = html %>% html_nodes('.product-details--content h3') %>% html_text()
      price = html %>% html_nodes('.price-per-quantity-weight') %>% html_text()
      offer = vector()
      offer_date = vector()
      for(j in 1:length(name)){
        xpth1 = paste0('//*[@id="tile-7001829106"]/div[',j,']/div[2]/div/ul/li/a/div/span[1]')
        ofr1 = html %>% html_nodes(xpath = xpth1) %>% html_text()
        xpth2 = paste0('//*[@id="tile-7001829106"]/div[',j,']/div[2]/div/ul/li/a/div/span[2]')
        ofr2 = html %>% html_nodes(xpath = xpth2) %>% html_text()
        
        offer[j] = ifelse(length(ofr1)==0,NA,ofr1)
        offer_date[j] = ifelse(length(ofr2)==0,NA,ofr2)
      }
      if(length(name)!=length(price)){price = html %>% html_nodes('.price-control-wrapper') %>% html_text()}
      url = next_pg
      # break if empty
      if(length(name)==0){break}
      # save in dataframe
      df = data.frame(item=name,offer=offer,offer_dates=offer_date,price=price,url=url)
      products_df = rbind(products_df,df)
      # break loop
      next_pg = html %>% html_nodes('.pagination--button.prev-next') %>% html_attr('href')
      next_pg = next_pg[length(next_pg)]
    }
  }
  products_df = unique(products_df)
  # close
  remDr$close()
  driver$server$stop()
  
  return(products_df)
}


